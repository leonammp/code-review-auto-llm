parameters:
- name: postComments
  type: boolean
  default: true
  displayName: 'Postar coment√°rios na PR'

- name: poetryVersion
  type: string
  default: '1.8.3'
  displayName: 'Vers√£o do Poetry'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.12'
    architecture: 'x64'
  displayName: 'Setup Python 3.12'

- checkout: self
  displayName: 'Checkout do Reposit√≥rio (PR)'

- checkout: git://$(System.TeamProject)/code-review-bot
  path: code-review-bot
  displayName: 'Checkout do Code Review Bot'

- task: Cache@2
  inputs:
    key: 'poetry | "$(Agent.OS)" | "python-3.12" | code-review-bot/poetry.lock'
    restoreKeys: |
      poetry | "$(Agent.OS)" | "python-3.12"
      poetry | "$(Agent.OS)"
    path: $(Pipeline.Workspace)/.cache/pypoetry
  displayName: 'Cache do Poetry'

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install poetry==${{ parameters.poetryVersion }}
    poetry --version
  displayName: 'Instalar Poetry ${{ parameters.poetryVersion }}'

- script: |
    cd $(Pipeline.Workspace)/code-review-bot
    poetry config virtualenvs.in-project true
    poetry config cache-dir $(Pipeline.Workspace)/.cache/pypoetry
    poetry install --only main --no-interaction --no-ansi
  displayName: 'Instalar Depend√™ncias'

- script: |
    cd $(Pipeline.Workspace)/code-review-bot
    poetry run review \
      --repo "$(Build.Repository.Name)" \
      --pr $(System.PullRequest.PullRequestId) \
      --project "$(System.TeamProject)" \
      ${{ eq(parameters.postComments, false) && '--no-post' || '' }}
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    LITELLM_API_KEY: $(LITELLM_API_KEY)
    LITELLM_API_BASE: $(LITELLM_API_BASE)
    AZDO_ORG: finnetbrasil
  displayName: 'ü§ñ Executar Code Review'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))